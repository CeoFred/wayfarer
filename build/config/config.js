"use strict";

var env = process.env.NODE_ENV || 'development';
var config = {
  development: {
    server: {
      port: process.env.PORT || 8001,
      hostname: process.env.HOSTNAME || 'localhost'
    },
    database: {
      user: 'postgres',
      host: 'localhost',
      database: 'wayfarer',
      password: 'iftrueconnect',
      port: '5432',
      ssl: false
    }
  },
  test: {
    server: {
      port: process.env.PORT || 8011,
      hostname: process.env.HOSTNAME || 'localhost'
    },
    database: {
      user: 'postgres',
      host: 'localhost',
      database: 'wayfarer_test',
      password: 'iftrueconnect',
      port: '5432',
      ssl: false
    }
  },
  production: {
    server: {
      port: process.env.PORT || 8002,
      hostname: process.env.HOSTNAME || 'localhost'
    },
    database: {
      user: 'iyfuthdxraayah',
      host: 'ec2-174-129-29-101.compute-1.amazonaws.com',
      database: 'df6k9h555q07ar',
      password: '892b54e56f50fa41ea695d10f5f5fd49dd42685f74fe482e6089aaca7ce7d270',
      port: '5432',
      ssl: true
    }
  },
  ci: {
    server: {
      port: process.env.PORT || 8002,
      hostname: process.env.HOSTNAME || 'localhost'
    },
    database: {
      user: 'kqugrtia',
      host: 'raja.db.elephantsql.com',
      database: 'kqugrtia',
      password: 'wj_XPTuaVJY5TbYOoGj362ZOU8PLht7R',
      port: '5432',
      ssl: true
    }
  }
};
config[env].isDev = env === 'development';
config[env].isTest = env === 'test';
config[env].isProd = env === 'production';
module.exports = config[env];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2FwcC9jb25maWcvY29uZmlnLmpzIl0sIm5hbWVzIjpbImVudiIsInByb2Nlc3MiLCJOT0RFX0VOViIsImNvbmZpZyIsImRldmVsb3BtZW50Iiwic2VydmVyIiwicG9ydCIsIlBPUlQiLCJob3N0bmFtZSIsIkhPU1ROQU1FIiwiZGF0YWJhc2UiLCJ1c2VyIiwiaG9zdCIsInBhc3N3b3JkIiwic3NsIiwidGVzdCIsInByb2R1Y3Rpb24iLCJjaSIsImlzRGV2IiwiaXNUZXN0IiwiaXNQcm9kIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6Ijs7QUFBQSxJQUFNQSxHQUFHLEdBQUdDLE9BQU8sQ0FBQ0QsR0FBUixDQUFZRSxRQUFaLElBQXdCLGFBQXBDO0FBRUEsSUFBTUMsTUFBTSxHQUFHO0FBQ2JDLEVBQUFBLFdBQVcsRUFBRTtBQUNYQyxJQUFBQSxNQUFNLEVBQUU7QUFDTkMsTUFBQUEsSUFBSSxFQUFFTCxPQUFPLENBQUNELEdBQVIsQ0FBWU8sSUFBWixJQUFvQixJQURwQjtBQUVOQyxNQUFBQSxRQUFRLEVBQUVQLE9BQU8sQ0FBQ0QsR0FBUixDQUFZUyxRQUFaLElBQXdCO0FBRjVCLEtBREc7QUFLWEMsSUFBQUEsUUFBUSxFQUFFO0FBQ1JDLE1BQUFBLElBQUksRUFBRSxVQURFO0FBRVJDLE1BQUFBLElBQUksRUFBRSxXQUZFO0FBR1JGLE1BQUFBLFFBQVEsRUFBRSxVQUhGO0FBSVJHLE1BQUFBLFFBQVEsRUFBRSxlQUpGO0FBS1JQLE1BQUFBLElBQUksRUFBRSxNQUxFO0FBTVJRLE1BQUFBLEdBQUcsRUFBRTtBQU5HO0FBTEMsR0FEQTtBQWlCYkMsRUFBQUEsSUFBSSxFQUFFO0FBQ0pWLElBQUFBLE1BQU0sRUFBRTtBQUNOQyxNQUFBQSxJQUFJLEVBQUVMLE9BQU8sQ0FBQ0QsR0FBUixDQUFZTyxJQUFaLElBQW9CLElBRHBCO0FBRU5DLE1BQUFBLFFBQVEsRUFBRVAsT0FBTyxDQUFDRCxHQUFSLENBQVlTLFFBQVosSUFBd0I7QUFGNUIsS0FESjtBQUtKQyxJQUFBQSxRQUFRLEVBQUU7QUFDUkMsTUFBQUEsSUFBSSxFQUFFLFVBREU7QUFFUkMsTUFBQUEsSUFBSSxFQUFFLFdBRkU7QUFHUkYsTUFBQUEsUUFBUSxFQUFFLGVBSEY7QUFJUkcsTUFBQUEsUUFBUSxFQUFFLGVBSkY7QUFLUlAsTUFBQUEsSUFBSSxFQUFFLE1BTEU7QUFNUlEsTUFBQUEsR0FBRyxFQUFFO0FBTkc7QUFMTixHQWpCTztBQWlDYkUsRUFBQUEsVUFBVSxFQUFFO0FBQ1ZYLElBQUFBLE1BQU0sRUFBRTtBQUNOQyxNQUFBQSxJQUFJLEVBQUVMLE9BQU8sQ0FBQ0QsR0FBUixDQUFZTyxJQUFaLElBQW9CLElBRHBCO0FBRU5DLE1BQUFBLFFBQVEsRUFBRVAsT0FBTyxDQUFDRCxHQUFSLENBQVlTLFFBQVosSUFBd0I7QUFGNUIsS0FERTtBQUtWQyxJQUFBQSxRQUFRLEVBQUU7QUFDUkMsTUFBQUEsSUFBSSxFQUFFLGdCQURFO0FBRVJDLE1BQUFBLElBQUksRUFBRSw0Q0FGRTtBQUdSRixNQUFBQSxRQUFRLEVBQUUsZ0JBSEY7QUFJUkcsTUFBQUEsUUFBUSxFQUFFLGtFQUpGO0FBS1JQLE1BQUFBLElBQUksRUFBRSxNQUxFO0FBTVJRLE1BQUFBLEdBQUcsRUFBRTtBQU5HO0FBTEEsR0FqQ0M7QUFnRGJHLEVBQUFBLEVBQUUsRUFBRTtBQUNGWixJQUFBQSxNQUFNLEVBQUU7QUFDTkMsTUFBQUEsSUFBSSxFQUFFTCxPQUFPLENBQUNELEdBQVIsQ0FBWU8sSUFBWixJQUFvQixJQURwQjtBQUVOQyxNQUFBQSxRQUFRLEVBQUVQLE9BQU8sQ0FBQ0QsR0FBUixDQUFZUyxRQUFaLElBQXdCO0FBRjVCLEtBRE47QUFLRkMsSUFBQUEsUUFBUSxFQUFFO0FBQ1JDLE1BQUFBLElBQUksRUFBRSxVQURFO0FBRVJDLE1BQUFBLElBQUksRUFBRSx5QkFGRTtBQUdSRixNQUFBQSxRQUFRLEVBQUUsVUFIRjtBQUlSRyxNQUFBQSxRQUFRLEVBQUUsa0NBSkY7QUFLUlAsTUFBQUEsSUFBSSxFQUFFLE1BTEU7QUFNUlEsTUFBQUEsR0FBRyxFQUFFO0FBTkc7QUFMUjtBQWhEUyxDQUFmO0FBZ0VBWCxNQUFNLENBQUNILEdBQUQsQ0FBTixDQUFZa0IsS0FBWixHQUFvQmxCLEdBQUcsS0FBSyxhQUE1QjtBQUNBRyxNQUFNLENBQUNILEdBQUQsQ0FBTixDQUFZbUIsTUFBWixHQUFxQm5CLEdBQUcsS0FBSyxNQUE3QjtBQUNBRyxNQUFNLENBQUNILEdBQUQsQ0FBTixDQUFZb0IsTUFBWixHQUFxQnBCLEdBQUcsS0FBSyxZQUE3QjtBQUVBcUIsTUFBTSxDQUFDQyxPQUFQLEdBQWlCbkIsTUFBTSxDQUFDSCxHQUFELENBQXZCIiwic291cmNlc0NvbnRlbnQiOlsiY29uc3QgZW52ID0gcHJvY2Vzcy5lbnYuTk9ERV9FTlYgfHwgJ2RldmVsb3BtZW50JztcblxuY29uc3QgY29uZmlnID0ge1xuICBkZXZlbG9wbWVudDoge1xuICAgIHNlcnZlcjoge1xuICAgICAgcG9ydDogcHJvY2Vzcy5lbnYuUE9SVCB8fCA4MDAxLFxuICAgICAgaG9zdG5hbWU6IHByb2Nlc3MuZW52LkhPU1ROQU1FIHx8ICdsb2NhbGhvc3QnLFxuICAgIH0sXG4gICAgZGF0YWJhc2U6IHtcbiAgICAgIHVzZXI6ICdwb3N0Z3JlcycsXG4gICAgICBob3N0OiAnbG9jYWxob3N0JyxcbiAgICAgIGRhdGFiYXNlOiAnd2F5ZmFyZXInLFxuICAgICAgcGFzc3dvcmQ6ICdpZnRydWVjb25uZWN0JyxcbiAgICAgIHBvcnQ6ICc1NDMyJyxcbiAgICAgIHNzbDogZmFsc2UsXG5cbiAgICB9LFxuICB9LFxuXG4gIHRlc3Q6IHtcbiAgICBzZXJ2ZXI6IHtcbiAgICAgIHBvcnQ6IHByb2Nlc3MuZW52LlBPUlQgfHwgODAxMSxcbiAgICAgIGhvc3RuYW1lOiBwcm9jZXNzLmVudi5IT1NUTkFNRSB8fCAnbG9jYWxob3N0JyxcbiAgICB9LFxuICAgIGRhdGFiYXNlOiB7XG4gICAgICB1c2VyOiAncG9zdGdyZXMnLFxuICAgICAgaG9zdDogJ2xvY2FsaG9zdCcsXG4gICAgICBkYXRhYmFzZTogJ3dheWZhcmVyX3Rlc3QnLFxuICAgICAgcGFzc3dvcmQ6ICdpZnRydWVjb25uZWN0JyxcbiAgICAgIHBvcnQ6ICc1NDMyJyxcbiAgICAgIHNzbDogZmFsc2UsXG5cbiAgICB9LFxuICB9LFxuXG4gIHByb2R1Y3Rpb246IHtcbiAgICBzZXJ2ZXI6IHtcbiAgICAgIHBvcnQ6IHByb2Nlc3MuZW52LlBPUlQgfHwgODAwMixcbiAgICAgIGhvc3RuYW1lOiBwcm9jZXNzLmVudi5IT1NUTkFNRSB8fCAnbG9jYWxob3N0JyxcbiAgICB9LFxuICAgIGRhdGFiYXNlOiB7XG4gICAgICB1c2VyOiAnaXlmdXRoZHhyYWF5YWgnLFxuICAgICAgaG9zdDogJ2VjMi0xNzQtMTI5LTI5LTEwMS5jb21wdXRlLTEuYW1hem9uYXdzLmNvbScsXG4gICAgICBkYXRhYmFzZTogJ2RmNms5aDU1NXEwN2FyJyxcbiAgICAgIHBhc3N3b3JkOiAnODkyYjU0ZTU2ZjUwZmE0MWVhNjk1ZDEwZjVmNWZkNDlkZDQyNjg1Zjc0ZmU0ODJlNjA4OWFhY2E3Y2U3ZDI3MCcsXG4gICAgICBwb3J0OiAnNTQzMicsXG4gICAgICBzc2w6IHRydWUsXG5cbiAgICB9LFxuICB9LFxuICBjaToge1xuICAgIHNlcnZlcjoge1xuICAgICAgcG9ydDogcHJvY2Vzcy5lbnYuUE9SVCB8fCA4MDAyLFxuICAgICAgaG9zdG5hbWU6IHByb2Nlc3MuZW52LkhPU1ROQU1FIHx8ICdsb2NhbGhvc3QnLFxuICAgIH0sXG4gICAgZGF0YWJhc2U6IHtcbiAgICAgIHVzZXI6ICdrcXVncnRpYScsXG4gICAgICBob3N0OiAncmFqYS5kYi5lbGVwaGFudHNxbC5jb20nLFxuICAgICAgZGF0YWJhc2U6ICdrcXVncnRpYScsXG4gICAgICBwYXNzd29yZDogJ3dqX1hQVHVhVkpZNVRiWU9vR2ozNjJaT1U4UExodDdSJyxcbiAgICAgIHBvcnQ6ICc1NDMyJyxcbiAgICAgIHNzbDogdHJ1ZSxcbiAgICB9LFxuICB9LFxufTtcblxuY29uZmlnW2Vudl0uaXNEZXYgPSBlbnYgPT09ICdkZXZlbG9wbWVudCc7XG5jb25maWdbZW52XS5pc1Rlc3QgPSBlbnYgPT09ICd0ZXN0JztcbmNvbmZpZ1tlbnZdLmlzUHJvZCA9IGVudiA9PT0gJ3Byb2R1Y3Rpb24nO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGNvbmZpZ1tlbnZdO1xuIl19