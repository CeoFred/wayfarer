{"version":3,"sources":["../../app/controllers/bookings.js"],"names":["express","require","logger","createLogger","router","Router","response","db","Utils","authCheck","post","req","res","tripId","body","trip_id","data","decoded","user","userId","busIsFilled","bus","booked","state","query","then","busData","busExists","rowCount","capacity","rows","Number","err","error","incrementNumberBooked","tripid","console","log","userHasPreviousBooking","trip","userBooking","resp","status","json","busId","bus_id","bookings","isFilled","filledRes","isBooked","bookedRes","randomString","Date","respo","success","admin","is_admin","bookingId","params","deletedRow","message","get","filter","user_id","module","exports"],"mappings":"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","sourcesContent":["const express = require('express');\nconst logger = require('logger').createLogger('./app/development.log');\n\nconst router = express.Router();\nconst response = require('../helpers/response');\nconst db = require('../config/db');\nconst Utils = require('../helpers/utils');\n\nconst authCheck = require('../middlewares/auth_check');\n\n// Book a seat on a trip\nrouter.post('/', authCheck, (req, res) => {\n  const tripId = req.body.trip_id;\n  const { data } = req.decoded;\n  const user = data.userId;\n\n  const busIsFilled = (bus, booked) => {\n    let state = null;\n    return db.query(`SELECT capacity from bus WHERE bus_id ='${bus}'`).then((busData) => {\n      const busExists = busData.rowCount > 0;\n      if (busExists) {\n        const capacity = busData.rows[0].capacity;\n        if (Number(booked) > Number(capacity)) {\n          state = true;\n        } else {\n          state = false;\n        }\n      } else {\n        state = false;\n      }\n      return state;\n    }).catch((err) => {\n      state = false;\n      logger.error(err);\n    });\n  };\n\n  const incrementNumberBooked = (tripid) => {\n    db.query(`UPDATE trips SET bookings = bookings + 1 WHERE trip_id = '${tripid}'`).then(() => {\n      console.log('Updated');\n    }).catch((err) => {\n      logger.error(err);\n    });\n  };\n\n  const userHasPreviousBooking = (trip) => {\n    return db.query(`SELECT * FROM bookings WHERE user_id = '${user}' AND status = 'Active' AND trip_id = '${trip}'`).then((userBooking) => {\n      console.log(userBooking);\n      if (userBooking.rowCount > 0) {\n        return true;\n      }\n      return false;\n    }).catch((err) => {\n      logger.error(err);\n      return false;\n    });\n  };\n  // check the bus capacity\n  // check if bus is filled with respect to trip booking, add new column for this number_booked\n  // for each new trip booking increment the number_booked\n  db.query(`SELECT * FROM trips WHERE trip_id = '${tripId}' AND status = 'Active'`)\n    .then((resp) => {\n      if (resp.rowCount <= 0) {\n        res.status(404).json(response.error('Trip not found'));\n      }\n      const busId = resp.rows[0].bus_id;\n      const bookings = resp.rows[0].bookings;\n      const isFilled = busIsFilled(busId, bookings);\n      isFilled.then((filledRes) => {\n        if (filledRes) {\n          res.status(200).json(response.error('Bus is full'));\n        } else {\n          // check if user has booked before and return bookin details\n          const isBooked = userHasPreviousBooking(tripId);\n          isBooked.then((bookedRes) => {\n            if (bookedRes) {\n              res.status(403).json(response.error('Already booked by user'));\n            }\n          });\n\n          db.query('INSERT INTO bookings(booking_id,trip_id,user_id,created_on,status,seat_number) VALUES($1,$2,$3,$4,$5) RETURNING *',\n            [Utils.randomString(200), resp.rows[0].trip_id, user, new Date(), 'Active', bookings + 1]).then((respo) => {\n            incrementNumberBooked(tripId);\n            res.status(201).json(response.success(respo.rows[0]));\n          }).catch((err) => {\n            res.status(500).json(response.error('Failed to book trip'));\n            logger.error(err);\n          });\n        }\n      }).catch((err) => {\n        logger.error(err);\n      });\n    }).catch((err) => {\n      res.status(500).json(response.error('Whoops! Something went wrong'));\n      logger.error(err);\n    });\n});\n\nrouter.delete('/:bookingId', authCheck, (req, res) => {\n// delete bookking\n  const { data } = req.decoded;\n\n  const admin = data.is_admin;\n  const user = data.userId;\n\n  const bookingId = req.params.bookingId;\n\n  db.query(`SELECT * FROM bookings WHERE booking_id = '${bookingId}' AND status =  'Active' `)\n    .then((resp) => {\n      if (resp.rowCount < 0) {\n        res.status(404).json(response.error('Booking ID not found'));\n      }\n      if (admin) {\n        db.query(`UPDATE bookings SET status = 'deleted' WHERE booking_id = '${bookingId}'`)\n          .then((deletedRow) => {\n            console.log(deletedRow);\n            res.status(200).json(response.success({ message: 'booking was deleted successfully' }));\n          }).catch((err) => {\n            logger.error(err);\n\n\n            res.status(500).json(response.error('Failed to cancle booking,check server logs'));\n          });\n      } else {\n        db.query(`UPDATE bookings SET status = 'deleted' WHERE booking_id = '${bookingId}' AND user_id = '${user}'`)\n          .then((deletedRow) => {\n            console.log(deletedRow);\n            res.status(200).json(response.success({ message: 'booking was deleted successfully' }));\n          }).catch((err) => {\n            logger.error(err);\n\n\n            res.status(500).json(response.error('Failed to cancle booking,check server logs'));\n          });\n      }\n    }).catch((err) => {\n      res.status(500).json(response.error('Whoops! Something went wrong'));\n      logger.error(err);\n    });\n});\n\nrouter.get('/', authCheck, (req, res) => {\n// get all bookings\n  const { data } = req.decoded;\n  const user = data.userId;\n  const admin = data.is_admin;\n  console.log(user);\n\n  db.query('SELECT bookings.user_id,users.email,users.first_name,users.last_name,bookings.booking_id FROM bookings INNER JOIN users USING (user_id)')\n    .then((resp) => {\n      if (admin) {\n        res.status(200).json(response.success(resp.rows));\n      } else {\n        const userBooking = resp.rows.filter((bookings) => {\n          console.log(bookings);\n          return bookings.user_id === user;\n        });\n        console.log(userBooking);\n        res.status(200).json(response.success({ userBooking, for: 'user' }));\n      }\n    }).catch((err) => {\n      logger.error(err);\n      res.status(500).json(response.error('Whoops! Failed to fetch booking'));\n    });\n});\n\nmodule.exports = router;\n"],"file":"bookings.js"}