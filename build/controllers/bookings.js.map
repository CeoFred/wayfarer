{"version":3,"sources":["../../app/controllers/bookings.js"],"names":["express","require","router","Router","check","validationResult","body","sanitizeBody","response","db","Utils","authCheck","post","req","res","tripId","params","data","decoded","user","userId","busIsFilled","bus","booked","state","query","then","busData","busExists","rowCount","capacity","rows","err","incrementNumberBooked","tripid","console","log","resp","status","json","error","busId","numberBooked","randomString","trip_id","Date","respo","success","patch","admin","is_admin","bookingId","deletedRow","get","userBooking","filter","bookings","user_id","module","exports"],"mappings":"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","sourcesContent":["const express = require('express');\n\nconst router = express.Router();\nconst {\n  check,\n  validationResult, body\n} = require('express-validator');\n\nconst { sanitizeBody } = require('express-validator');\nconst response = require('../helpers/response');\nconst db = require('../config/db');\nconst Utils = require('../helpers/utils');\n\nconst authCheck = require('../middlewares/auth_check');\n\n// Book a seat on a trip\nrouter.post('/', authCheck, (req, res) => {\n  const tripId = req.params.tripId;\n  const { data } = req.decoded;\n  const user = data.userId;\n\n  const busIsFilled = (bus, booked) => {\n    let state = null;\n    db.query(`SELECT capacity from bus WHERE bus_id ='${bus}'`).then((busData) => {\n      const busExists = busData.rowCount > 0;\n      if (busExists) {\n        const capacity = busData.rows[0].capacity;\n        if (booked === capacity) {\n          state = true;\n        } else {\n          state = false;\n        }\n      }\n    }).catch((err) => {\n      state = false;\n      throw err;\n    });\n    return state;\n  };\n\n  const incrementNumberBooked = (tripid) => {\n    db.query(`UPDATE trips SET numberBooked = 'numberBooked + 1' WHERE trip_id = '${tripid}'`).then(res => {\n        console.log(res.rows)\n    }).catch(err => {\n        console.log(err)\n    })   \n  }\n  // check the bus capacity\n  // check if bus is filled with respect to trip booking, add new column for this number_booked\n  // for each new trip booking increment the number_booked\n  db.query(`SELECT * FROM trips WHERE trip_id = '${tripId}' AND status = 'Active'`)\n    .then((resp) => {\n      if (res.rowCount <= 0) {\n        res.status(404).json(response.error('Trip not found'));\n      }\n      const busId = resp.rows[0].busId;\n      const numberBooked = resp.rows[0].numberBooked;\n\n      if (busIsFilled(busId, numberBooked)) {\n        res.status(200).json(response.error('Bus is full'));\n      }\n\n      db.query('INSERT INTO bookings(booking_id,trip_id,user_id,created_on,status) VALUES($1,$2,$3,$4,$5) RETURNING *',\n        [Utils.randomString(200), resp.rows[0].trip_id, user, new Date(), 'Active']).then((respo) => {\n            incrementNumberBooked(tripId);\n        res.status(201).json(response.success(respo.rows[0]));\n      }).catch((err) => {\n        res.status(500).json(response.error('Failed to book trip'));\n        console.log(err);\n      });\n    }).catch((err) => {\n      res.status(500).json(response.error('Whoops! Something went wrong'));\n      console.log(err);\n    });\n});\n\nrouter.patch('/:bookingId', authCheck, (req, res) => {\n// delete bookking\n  const { data } = req.decoded;\n\n  const admin = data.is_admin;\n  const user = data.userId;\n\n  const bookingId = req.params.bookingId;\n\n  db.query(`SELECT * FROM bookings WHERE bookingId = '${bookingId}' AND status =  'Active' `)\n    .then((resp) => {\n      if (resp.rowCount < 0) {\n        res.status(404).json(response.error('Booking ID not found'));\n      }\n      if (admin) {\n        db.query(`UPDATE bookings SET status = 'deleted' WHERE bookingId = '${bookingId}' RETURNING *`)\n          .then((deletedRow) => {\n            console.log(deletedRow);\n            res.status(200).json(response.success(deletedRow.rows[0]));\n          }).catch((err) => {\n            console.log(err);\n\n            res.status(500).json(response.error('Failed to cancle booking,check server logs'));\n          });\n      } else {\n        db.query(`UPDATE bookings SET status = 'deleted' WHERE booking_id = '${bookingId}' AND user_id = '${user}' RETURNING *`)\n          .then((deletedRow) => {\n            console.log(deletedRow);\n            res.status(200).json(response.success(deletedRow.rows[0]));\n          }).catch((err) => {\n            console.log(err);\n\n            res.status(500).json(response.error('Failed to cancle booking,check server logs'));\n          });\n      }\n    }).catch((err) => {\n      res.status(500).json(response.error('Whoops! Something went wrong'));\n      console.log(err);\n    });\n});\n\nrouter.get('/', authCheck, (req, res) => {\n// get al bookings\n  const { data } = req.decoded;\n  const user = data.userId;\n  const admin = data.is_admin;\n  console.log(user);\n\n  db.query('SELECT bookings.user_id,trips.fare,trips.origin,trips.destination,trips.bus_id,bookings.booking_id FROM bookings INNER JOIN trips USING (trip_id)')\n    .then((resp) => {\n      if (admin) {\n        res.status(200).json(response.success(resp.rows));\n      } else {\n        const userBooking = resp.rows.filter((bookings) => {\n          console.log(bookings);\n          return bookings.user_id === user;\n        });\n        console.log(userBooking);\n        res.status(200).json(response.success({ userBooking, for: 'user' }));\n      }\n    }).catch((err) => {\n      console.log(err);\n      res.status(500).json(response.error('Whoops! Failed to fetch booking'));\n    });\n});\n\nmodule.exports = router;\n"],"file":"bookings.js"}