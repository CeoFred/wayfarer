"use strict";

var express = require('express');

var logger = require('logger').createLogger('./development.log');

var router = express.Router();

var response = require('../helpers/response');

var db = require('../config/db');

var Utils = require('../helpers/utils');

var authCheck = require('../middlewares/auth_check');

router.post('/', authCheck, function (req, res) {
  // new trip
  var _req$body = req.body,
      origin = _req$body.origin,
      destination = _req$body.destination,
      fare = _req$body.fare,
      trip_date = _req$body.trip_date;
  var data = req.decoded.data;

  if (!data.is_admin) {
    res.status(401).json(response.error('Access Denied'));
  }

  var uniqui = Utils.randomString(200);
  var query = {
    text: 'INSERT INTO trips(user_id,origin,destination,trip_date,fare,trip_id,status) VALUES($1,$2,$3,$4,$5,$6,$7) RETURNING *',
    values: [data.user_id, origin, destination, trip_date, fare, uniqui.trimRight(), 'Active']
  };
  db.query(query).then(function (resp) {
    var trip_data = resp.rows[0];
    trip_data.id = resp.rows[0].booking_id;
    res.status(201).json(response.success(trip_data));
  })["catch"](function (err) {
    logger.error(err);
    res.status(500).json(response.error('Something went wrong'));
  });
}).get('/', function (req, res) {
  // get all trips available
  db.query("SELECT * FROM trips WHERE status = 'Active' ").then(function (resp) {
    res.status(200).json(response.success(resp.rows));
  })["catch"](function (err) {
    logger.error(err);
    console.log(err);
    res.status(500).json(response.error('Failed to fetch trips'));
  });
}).patch('/:tripId', authCheck, function (req, res) {
  // cancel a trip
  var tripId = req.params.tripId;
  var data = req.decoded.data;

  if (!data.is_admin) {
    res.status(401).json(response.error('Access Denied'));
  }

  db.query("SELECT * FROM trips WHERE status = 'Active' AND trip_id = '".concat(tripId, "' ")).then(function (resp) {
    if (resp.rowCount <= 0) {
      res.status(404).json(response.error('Trip Not found'));
    } else {
      db.query("UPDATE trips SET status = 'cancelled' WHERE trip_id = '".concat(tripId, "' AND status = 'Active'")).then(function (busData) {
        res.status(200).json(response.success({
          message: 'Trip cancelled successfully',
          busData: busData
        }));
      })["catch"](function (err) {
        res.status(500).json(response.error({
          message: 'Trip failed to cancel'
        }));
        logger.error({
          err: err,
          message: 'while canceling trip'
        });
      });
    }
  })["catch"](function (err) {
    logger.error(err);
    res.status(500).json(response.error('Failed to fetch trips'));
  });
});
module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,