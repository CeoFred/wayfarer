"use strict";

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { keys.push.apply(keys, Object.getOwnPropertySymbols(object)); } if (enumerableOnly) keys = keys.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var express = require('express');

var logger = require('logger').createLogger('./development.log');

var router = express.Router();

var _require = require('express-validator'),
    check = _require.check,
    validationResult = _require.validationResult,
    body = _require.body;

var response = require('../helpers/response');

var db = require('../config/db');

var Utils = require('../helpers/utils');

var authCheck = require('../middlewares/auth_check');

router.post('/', authCheck, [check('origin').exists().withMessage('origin is required'), body('origin').not().isEmpty().escape(), check('destination').exists().withMessage('destination is required'), body('destination').not().isEmpty().escape(), check('fare').exists().withMessage('fare is required'), body('fare').not().isEmpty().escape(), check('trip_date').exists().withMessage('trip Date is required'), body('trip_date').not().isEmpty().escape()], function (req, res) {
  // new trip
  var errors = validationResult(req);

  if (!errors.isEmpty()) {
    res.status(403).json(response.error(errors));
  }

  var _req$body = req.body,
      origin = _req$body.origin,
      destination = _req$body.destination,
      fare = _req$body.fare,
      trip_date = _req$body.trip_date;
  var data = req.decoded.data;
  console.log(data);

  if (!data.is_admin) {
    res.status(401).json(response.error('Access Denied'));
  }

  var busId = 'axp3OrMLni6kWX3UNmmvcwOOyqqK6QhgObaQmR0Nl0ssAk8gTDVOR8Q0EnboUwkLi58S7Kyygd9079BKYNEO9LOvtNVj6oOcwDNYP5CMcDiMuTQzkFM9PDzsXzh90n6ZUZgDOyfVpEkGNRVWj5Y887Wy4VbxmuYSeGhwJtkjRhtd6JLxVvfjlDxbVz36pbbHXRqlrnOk';
  var uniqui = Utils.randomString(200);
  var query = {
    text: 'INSERT INTO trips(bus_id,user_id,origin,destination,trip_date,fare,trip_id,status) VALUES($1,$2,$3,$4,$5,$6,$7,$8) RETURNING *',
    values: [busId, data.user_id, origin, destination, trip_date, fare, uniqui, 'Active']
  };
  db.query(query).then(function (resp) {
    var trip_data = null;
    trip_data = _objectSpread({}, resp.rows[0], {
      id: resp.rows[0].trip_id
    });
    res.status(201).json(response.success(trip_data));
  })["catch"](function (err) {
    console.log(err);
    res.status(500).json(response.error('Something went wrong'));
  });
}).get('/', function (req, res) {
  // get all trips available
  db.query("SELECT * FROM trips WHERE status = 'Active' ").then(function (resp) {
    res.status(200).json(response.success(resp.rows));
  })["catch"](function (err) {
    logger.error(err);
    console.log(JSON.stringify(err));
    res.status(500).json(response.error('Failed to fetch trips'));
  });
}).patch('/:tripId', authCheck, function (req, res) {
  // cancel a trip
  var tripId = req.params.tripId;
  var data = req.decoded.data;

  if (!data.is_admin) {
    res.status(401).json(response.error('Access Denied'));
  }

  db.query("SELECT * FROM trips WHERE status = 'Active' AND trip_id = '".concat(tripId, "' ")).then(function (resp) {
    if (resp.rowCount <= 0) {
      res.status(404).json(response.error('Trip Not found'));
    } else {
      db.query("UPDATE trips SET status = 'cancelled' WHERE trip_id = '".concat(tripId, "' AND status = 'Active'")).then(function (busData) {
        res.status(200).json(response.success({
          message: 'Trip cancelled successfully',
          busData: busData
        }));
      })["catch"](function (err) {
        logger.error({
          err: err,
          message: 'while canceling trip'
        });
        return res.status(500).json(response.error({
          message: 'Trip failed to cancel'
        }));
      });
    }
  })["catch"](function (err) {
    logger.error(err);
    return res.status(500).json(response.error('Failed to fetch trips'));
  });
});
module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,