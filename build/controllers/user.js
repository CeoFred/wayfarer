"use strict";

/* eslint-disable consistent-return */

/* eslint-disable no-underscore-dangle */
var express = require('express');

var router = express.Router();

var logger = require('logger').createLogger('./development.log');

var bcrypt = require('bcrypt');

var _require = require('express-validator'),
    check = _require.check,
    validationResult = _require.validationResult,
    body = _require.body;

var _require2 = require('express-validator'),
    sanitizeBody = _require2.sanitizeBody;

var _response = require('../helpers/response');

var db = require('../config/db');

var Utils = require('../helpers/utils');

var authCheck = require('../middlewares/auth_check'); // create a new user


router.post('/signup', [check('email').exists().withMessage('Email is required'), check('password').exists().withMessage('Password is required'), check('firstName').exists().withMessage('First name is required'), check('lastName').exists().withMessage('Last name is required'), body('email').not().isEmpty().escape().isEmail(), sanitizeBody('email').normalizeEmail().trim()], function (req, res) {
  var errors = validationResult(req);

  if (!errors.isEmpty()) {
    return res.status(404).json(_response.error(errors));
  }

  logger.info({
    errors: errors,
    msg: 'User auth validation'
  });
  var _req$body = req.body,
      email = _req$body.email,
      password = _req$body.password,
      firstName = _req$body.firstName,
      lastName = _req$body.lastName;
  var isAdmin = true;
  var searchQuery = "SELECT * FROM users WHERE email = '".concat(email, "' ");
  db.query(searchQuery).then(function (resp) {
    if (resp.rowCount > 0) {
      res.status(403).json(_response.error('Email already exists'));
    } else {
      // find users
      db.query('SELECT * FROM users').then(function (users) {
        if (users.rowCount > 0) {
          isAdmin = false;
        }

        bcrypt.hash(password, 10, function (err, hash) {
          if (err) {
            res.status(500).json(_response.error(err));
          } else {
            var uniqui = Utils.randomString(200);
            var query = {
              text: 'INSERT INTO users(user_id,first_name,last_name,email,password,is_admin,address) VALUES($1,$2,$3,$4,$5,$6,$7) RETURNING *',
              values: [uniqui.trimRight(), firstName, lastName, email, hash, isAdmin, 'somewhere']
            };
            db.query(query).then(function (respo) {
              var jwtdata = {
                email: respo.rows[0].email,
                userId: respo.rows[0].user_id,
                is_admin: respo.rows[0].is_admin
              };
              var token = Utils.signToken(jwtdata);
              var data = {
                user_id: respo.rows[0].user_id,
                is_admin: respo.rows[0].is_admin,
                token: token
              };
              res.status(201).json(_response.success(data));
            })["catch"](function (e) {
              logger.error(e);
              res.status(500).json(_response.error('Something went wrong'));
            });
          }
        });
        logger.info(isAdmin);
      })["catch"](function (err) {
        logger.error(err);
        res.status(505).json(_response.error('Could not fetch users'));
      }); // end find users
    }
  })["catch"](function (err) {
    res.json(_response.error(err));
  }); // res.send(response.error('Something went wrong'))
}).post('/signin', body('email').not().isEmpty().escape().isEmail(), function (req, res) {
  var errors = validationResult(req);

  if (!errors.isEmpty()) {
    return res.status(403).send(_response.error(errors));
  }

  var _req$body2 = req.body,
      email = _req$body2.email,
      password = _req$body2.password;
  var searchQuery = "SELECT * FROM users WHERE email = '".concat(email, "' LIMIT 1");
  db.query(searchQuery).then(function (resp) {
    if (resp.rowCount <= 0) {
      res.status(403).json(_response.error('Email does not exist'));
    }

    bcrypt.compare(password, resp.rows[0].password, function (err, result) {
      // res == true
      if (err) {
        res.status(401).json(_response.error('Failed with code x(2e2x)'));
      }

      if (result) {
        var jwtdata = {
          email: resp.rows[0].email,
          userId: resp.rows[0].user_id,
          is_admin: resp.rows[0].is_admin
        };
        var token = Utils.signToken(jwtdata);
        req.headers.authorization = "Bearer ".concat(token);
        var data = {
          user_id: resp.rows[0].user_id,
          is_admin: resp.rows[0].is_admin,
          token: token
        };
        res.status(200).json(_response.success(data));
      }
    });
  });
}).post('/admin/:userId', authCheck, function (req, res) {
  // make user an admin
  var toBeAdmin = req.params.userId;
  var data = req.decoded.data;
  var admin = data.is_admin;
  logger.info(admin);

  if (admin) {
    db.query("SELECT * FROM users WHERE user_id = '".concat(toBeAdmin, "' AND is_admin='", false, "'")).then(function (resp) {
      if (resp.rowCount > 0) {
        db.query("UPDATE users SET is_admin='".concat(true, "' WHERE user_id = '", toBeAdmin, "' RETURNING *")).then(function (newAdminData) {
          if (newAdminData.rowCount > 0) {
            res.status(200).json(_response.success(newAdminData.rows[0]));
          } else {
            res.status(500).json(_response.error('Failed to assign role'));
          }
        })["catch"](function () {
          res.status(401).json(_response.error('Opps! Something went wrong'));
        });
      } else {
        res.status(403).json(_response.error('Cannot re-assign role to user'));
      }
    })["catch"](function () {
      res.status(401).json(_response.error('Opps! Something went wrong'));
    });
  } else {
    res.status(505).json(_response.error('Your plans failed, we have a stronger algorithm'));
  }
});
module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL2FwcC9jb250cm9sbGVycy91c2VyLmpzIl0sIm5hbWVzIjpbImV4cHJlc3MiLCJyZXF1aXJlIiwicm91dGVyIiwiUm91dGVyIiwibG9nZ2VyIiwiY3JlYXRlTG9nZ2VyIiwiYmNyeXB0IiwiY2hlY2siLCJ2YWxpZGF0aW9uUmVzdWx0IiwiYm9keSIsInNhbml0aXplQm9keSIsIl9yZXNwb25zZSIsImRiIiwiVXRpbHMiLCJhdXRoQ2hlY2siLCJwb3N0IiwiZXhpc3RzIiwid2l0aE1lc3NhZ2UiLCJub3QiLCJpc0VtcHR5IiwiZXNjYXBlIiwiaXNFbWFpbCIsIm5vcm1hbGl6ZUVtYWlsIiwidHJpbSIsInJlcSIsInJlcyIsImVycm9ycyIsInN0YXR1cyIsImpzb24iLCJlcnJvciIsImluZm8iLCJtc2ciLCJlbWFpbCIsInBhc3N3b3JkIiwiZmlyc3ROYW1lIiwibGFzdE5hbWUiLCJpc0FkbWluIiwic2VhcmNoUXVlcnkiLCJxdWVyeSIsInRoZW4iLCJyZXNwIiwicm93Q291bnQiLCJ1c2VycyIsImhhc2giLCJlcnIiLCJ1bmlxdWkiLCJyYW5kb21TdHJpbmciLCJ0ZXh0IiwidmFsdWVzIiwidHJpbVJpZ2h0IiwicmVzcG8iLCJqd3RkYXRhIiwicm93cyIsInVzZXJJZCIsInVzZXJfaWQiLCJpc19hZG1pbiIsInRva2VuIiwic2lnblRva2VuIiwiZGF0YSIsInN1Y2Nlc3MiLCJlIiwic2VuZCIsImNvbXBhcmUiLCJyZXN1bHQiLCJoZWFkZXJzIiwiYXV0aG9yaXphdGlvbiIsInRvQmVBZG1pbiIsInBhcmFtcyIsImRlY29kZWQiLCJhZG1pbiIsIm5ld0FkbWluRGF0YSIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7QUFDQSxJQUFNQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxTQUFELENBQXZCOztBQUVBLElBQU1DLE1BQU0sR0FBR0YsT0FBTyxDQUFDRyxNQUFSLEVBQWY7O0FBQ0EsSUFBTUMsTUFBTSxHQUFHSCxP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UyxDQUFDa0IsS0FBVixDQUFnQixpREFBaEIsQ0FBckI7QUFDRDtBQUNGLENBL0lEO0FBaUpBMEMsTUFBTSxDQUFDQyxPQUFQLEdBQWlCdEUsTUFBakIiLCJzb3VyY2VzQ29udGVudCI6WyIvKiBlc2xpbnQtZGlzYWJsZSBjb25zaXN0ZW50LXJldHVybiAqL1xuLyogZXNsaW50LWRpc2FibGUgbm8tdW5kZXJzY29yZS1kYW5nbGUgKi9cbmNvbnN0IGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJyk7XG5cbmNvbnN0IHJvdXRlciA9IGV4cHJlc3MuUm91dGVyKCk7XG5jb25zdCBsb2dnZXIgPSByZXF1aXJlKCdsb2dnZXInKS5jcmVhdGVMb2dnZXIoJy4vZGV2ZWxvcG1lbnQubG9nJyk7XG5cblxuY29uc3QgYmNyeXB0ID0gcmVxdWlyZSgnYmNyeXB0Jyk7XG5jb25zdCB7XG4gIGNoZWNrLFxuICB2YWxpZGF0aW9uUmVzdWx0LCBib2R5LFxufSA9IHJlcXVpcmUoJ2V4cHJlc3MtdmFsaWRhdG9yJyk7XG5cbmNvbnN0IHtcbiAgc2FuaXRpemVCb2R5LFxufSA9IHJlcXVpcmUoJ2V4cHJlc3MtdmFsaWRhdG9yJyk7XG5jb25zdCBfcmVzcG9uc2UgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3Jlc3BvbnNlJyk7XG5jb25zdCBkYiA9IHJlcXVpcmUoJy4uL2NvbmZpZy9kYicpO1xuY29uc3QgVXRpbHMgPSByZXF1aXJlKCcuLi9oZWxwZXJzL3V0aWxzJyk7XG5jb25zdCBhdXRoQ2hlY2sgPSByZXF1aXJlKCcuLi9taWRkbGV3YXJlcy9hdXRoX2NoZWNrJyk7XG5cbi8vIGNyZWF0ZSBhIG5ldyB1c2VyXG5yb3V0ZXIucG9zdCgnL3NpZ251cCcsXG4gIFtcbiAgICBjaGVjaygnZW1haWwnKS5leGlzdHMoKS53aXRoTWVzc2FnZSgnRW1haWwgaXMgcmVxdWlyZWQnKSxcbiAgICBjaGVjaygncGFzc3dvcmQnKS5leGlzdHMoKS53aXRoTWVzc2FnZSgnUGFzc3dvcmQgaXMgcmVxdWlyZWQnKSxcbiAgICBjaGVjaygnZmlyc3ROYW1lJykuZXhpc3RzKCkud2l0aE1lc3NhZ2UoJ0ZpcnN0IG5hbWUgaXMgcmVxdWlyZWQnKSxcbiAgICBjaGVjaygnbGFzdE5hbWUnKS5leGlzdHMoKS53aXRoTWVzc2FnZSgnTGFzdCBuYW1lIGlzIHJlcXVpcmVkJyksXG4gICAgYm9keSgnZW1haWwnKS5ub3QoKS5pc0VtcHR5KCkuZXNjYXBlKClcbiAgICAgIC5pc0VtYWlsKCksXG4gICAgc2FuaXRpemVCb2R5KCdlbWFpbCcpLm5vcm1hbGl6ZUVtYWlsKCkudHJpbSgpLFxuICBdLCAocmVxLCByZXMpID0+IHtcbiAgICBjb25zdCBlcnJvcnMgPSB2YWxpZGF0aW9uUmVzdWx0KHJlcSk7XG4gICAgaWYgKCFlcnJvcnMuaXNFbXB0eSgpKSB7XG4gICAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDQpLmpzb24oX3Jlc3BvbnNlLmVycm9yKGVycm9ycykpO1xuICAgIH1cbiAgICBsb2dnZXIuaW5mbyh7IGVycm9ycywgbXNnOiAnVXNlciBhdXRoIHZhbGlkYXRpb24nIH0pO1xuICAgIGNvbnN0IHtcbiAgICAgIGVtYWlsLFxuICAgICAgcGFzc3dvcmQsXG4gICAgICBmaXJzdE5hbWUsXG4gICAgICBsYXN0TmFtZSxcbiAgICB9ID0gcmVxLmJvZHk7XG4gICAgbGV0IGlzQWRtaW4gPSB0cnVlO1xuICAgIGNvbnN0IHNlYXJjaFF1ZXJ5ID0gYFNFTEVDVCAqIEZST00gdXNlcnMgV0hFUkUgZW1haWwgPSAnJHtlbWFpbH0nIGA7XG5cbiAgICBkYi5xdWVyeShzZWFyY2hRdWVyeSkudGhlbigocmVzcCkgPT4ge1xuICAgICAgaWYgKHJlc3Aucm93Q291bnQgPiAwKSB7XG4gICAgICAgIHJlcy5zdGF0dXMoNDAzKS5qc29uKF9yZXNwb25zZS5lcnJvcignRW1haWwgYWxyZWFkeSBleGlzdHMnKSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBmaW5kIHVzZXJzXG4gICAgICAgIGRiLnF1ZXJ5KCdTRUxFQ1QgKiBGUk9NIHVzZXJzJykudGhlbigodXNlcnMpID0+IHtcbiAgICAgICAgICBpZiAodXNlcnMucm93Q291bnQgPiAwKSB7XG4gICAgICAgICAgICBpc0FkbWluID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICAgIGJjcnlwdC5oYXNoKHBhc3N3b3JkLCAxMCwgKGVyciwgaGFzaCkgPT4ge1xuICAgICAgICAgICAgaWYgKGVycikge1xuICAgICAgICAgICAgICByZXMuc3RhdHVzKDUwMCkuanNvbihfcmVzcG9uc2UuZXJyb3IoZXJyKSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBjb25zdCB1bmlxdWkgPSBVdGlscy5yYW5kb21TdHJpbmcoMjAwKTtcbiAgICAgICAgICAgICAgY29uc3QgcXVlcnkgPSB7XG4gICAgICAgICAgICAgICAgdGV4dDogJ0lOU0VSVCBJTlRPIHVzZXJzKHVzZXJfaWQsZmlyc3RfbmFtZSxsYXN0X25hbWUsZW1haWwscGFzc3dvcmQsaXNfYWRtaW4sYWRkcmVzcykgVkFMVUVTKCQxLCQyLCQzLCQ0LCQ1LCQ2LCQ3KSBSRVRVUk5JTkcgKicsXG4gICAgICAgICAgICAgICAgdmFsdWVzOiBbdW5pcXVpLnRyaW1SaWdodCgpLCBmaXJzdE5hbWUsIGxhc3ROYW1lLCBlbWFpbCwgaGFzaCwgaXNBZG1pbiwgJ3NvbWV3aGVyZSddLFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICBkYi5xdWVyeShxdWVyeSlcbiAgICAgICAgICAgICAgICAudGhlbigocmVzcG8pID0+IHtcbiAgICAgICAgICAgICAgICAgIGNvbnN0IGp3dGRhdGEgPSB7XG4gICAgICAgICAgICAgICAgICAgIGVtYWlsOiByZXNwby5yb3dzWzBdLmVtYWlsLFxuICAgICAgICAgICAgICAgICAgICB1c2VySWQ6IHJlc3BvLnJvd3NbMF0udXNlcl9pZCxcbiAgICAgICAgICAgICAgICAgICAgaXNfYWRtaW46IHJlc3BvLnJvd3NbMF0uaXNfYWRtaW4sXG4gICAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgICAgY29uc3QgdG9rZW4gPSBVdGlscy5zaWduVG9rZW4oand0ZGF0YSk7XG4gICAgICAgICAgICAgICAgICBjb25zdCBkYXRhID0ge1xuICAgICAgICAgICAgICAgICAgICB1c2VyX2lkOiByZXNwby5yb3dzWzBdLnVzZXJfaWQsXG4gICAgICAgICAgICAgICAgICAgIGlzX2FkbWluOiByZXNwby5yb3dzWzBdLmlzX2FkbWluLFxuICAgICAgICAgICAgICAgICAgICB0b2tlbixcbiAgICAgICAgICAgICAgICAgIH07XG4gICAgICAgICAgICAgICAgICByZXMuc3RhdHVzKDIwMSkuanNvbihfcmVzcG9uc2Uuc3VjY2VzcyhkYXRhKSk7XG4gICAgICAgICAgICAgICAgfSkuY2F0Y2goKGUpID0+IHtcbiAgICAgICAgICAgICAgICAgIGxvZ2dlci5lcnJvcihlKTtcbiAgICAgICAgICAgICAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKF9yZXNwb25zZS5lcnJvcignU29tZXRoaW5nIHdlbnQgd3JvbmcnKSk7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgbG9nZ2VyLmluZm8oaXNBZG1pbik7XG4gICAgICAgIH0pLmNhdGNoKChlcnIpID0+IHtcbiAgICAgICAgICBsb2dnZXIuZXJyb3IoZXJyKTtcbiAgICAgICAgICByZXMuc3RhdHVzKDUwNSkuanNvbihfcmVzcG9uc2UuZXJyb3IoJ0NvdWxkIG5vdCBmZXRjaCB1c2VycycpKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGVuZCBmaW5kIHVzZXJzXG4gICAgICB9XG4gICAgfSkuY2F0Y2goKGVycikgPT4ge1xuICAgICAgcmVzLmpzb24oX3Jlc3BvbnNlLmVycm9yKGVycikpO1xuICAgIH0pO1xuXG5cbiAgICAvLyByZXMuc2VuZChyZXNwb25zZS5lcnJvcignU29tZXRoaW5nIHdlbnQgd3JvbmcnKSlcbiAgfSkucG9zdCgnL3NpZ25pbicsIGJvZHkoJ2VtYWlsJykubm90KCkuaXNFbXB0eSgpLmVzY2FwZSgpXG4gIC5pc0VtYWlsKCksXG4ocmVxLCByZXMpID0+IHtcbiAgY29uc3QgZXJyb3JzID0gdmFsaWRhdGlvblJlc3VsdChyZXEpO1xuICBpZiAoIWVycm9ycy5pc0VtcHR5KCkpIHtcbiAgICByZXR1cm4gcmVzLnN0YXR1cyg0MDMpLnNlbmQoX3Jlc3BvbnNlLmVycm9yKGVycm9ycykpO1xuICB9XG4gIGNvbnN0IHtcbiAgICBlbWFpbCxcbiAgICBwYXNzd29yZCxcbiAgfSA9IHJlcS5ib2R5O1xuICBjb25zdCBzZWFyY2hRdWVyeSA9IGBTRUxFQ1QgKiBGUk9NIHVzZXJzIFdIRVJFIGVtYWlsID0gJyR7ZW1haWx9JyBMSU1JVCAxYDtcblxuICBkYi5xdWVyeShzZWFyY2hRdWVyeSkudGhlbigocmVzcCkgPT4ge1xuICAgIGlmIChyZXNwLnJvd0NvdW50IDw9IDApIHtcbiAgICAgIHJlcy5zdGF0dXMoNDAzKS5qc29uKF9yZXNwb25zZS5lcnJvcignRW1haWwgZG9lcyBub3QgZXhpc3QnKSk7XG4gICAgfVxuXG4gICAgYmNyeXB0LmNvbXBhcmUocGFzc3dvcmQsIHJlc3Aucm93c1swXS5wYXNzd29yZCwgKGVyciwgcmVzdWx0KSA9PiB7XG4gICAgICAvLyByZXMgPT0gdHJ1ZVxuICAgICAgaWYgKGVycikge1xuICAgICAgICByZXMuc3RhdHVzKDQwMSkuanNvbihfcmVzcG9uc2UuZXJyb3IoJ0ZhaWxlZCB3aXRoIGNvZGUgeCgyZTJ4KScpKTtcbiAgICAgIH1cbiAgICAgIGlmIChyZXN1bHQpIHtcbiAgICAgICAgY29uc3Qgand0ZGF0YSA9IHtcbiAgICAgICAgICBlbWFpbDogcmVzcC5yb3dzWzBdLmVtYWlsLFxuICAgICAgICAgIHVzZXJJZDogcmVzcC5yb3dzWzBdLnVzZXJfaWQsXG4gICAgICAgICAgaXNfYWRtaW46IHJlc3Aucm93c1swXS5pc19hZG1pbixcbiAgICAgICAgfTtcbiAgICAgICAgY29uc3QgdG9rZW4gPSBVdGlscy5zaWduVG9rZW4oand0ZGF0YSk7XG4gICAgICAgIHJlcS5oZWFkZXJzLmF1dGhvcml6YXRpb24gPSBgQmVhcmVyICR7dG9rZW59YDtcbiAgICAgICAgY29uc3QgZGF0YSA9IHtcbiAgICAgICAgICB1c2VyX2lkOiByZXNwLnJvd3NbMF0udXNlcl9pZCxcbiAgICAgICAgICBpc19hZG1pbjogcmVzcC5yb3dzWzBdLmlzX2FkbWluLFxuICAgICAgICAgIHRva2VuLFxuICAgICAgICB9O1xuICAgICAgICByZXMuc3RhdHVzKDIwMCkuanNvbihfcmVzcG9uc2Uuc3VjY2VzcyhkYXRhKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufSkucG9zdCgnL2FkbWluLzp1c2VySWQnLCBhdXRoQ2hlY2ssIChyZXEsIHJlcykgPT4ge1xuICAvLyBtYWtlIHVzZXIgYW4gYWRtaW5cbiAgY29uc3QgdG9CZUFkbWluID0gcmVxLnBhcmFtcy51c2VySWQ7XG4gIGNvbnN0IHsgZGF0YSB9ID0gcmVxLmRlY29kZWQ7XG4gIGNvbnN0IGFkbWluID0gZGF0YS5pc19hZG1pbjtcblxuICBsb2dnZXIuaW5mbyhhZG1pbik7XG4gIGlmIChhZG1pbikge1xuICAgIGRiLnF1ZXJ5KGBTRUxFQ1QgKiBGUk9NIHVzZXJzIFdIRVJFIHVzZXJfaWQgPSAnJHt0b0JlQWRtaW59JyBBTkQgaXNfYWRtaW49JyR7ZmFsc2V9J2ApLnRoZW4oKHJlc3ApID0+IHtcbiAgICAgIGlmIChyZXNwLnJvd0NvdW50ID4gMCkge1xuICAgICAgICBkYi5xdWVyeShgVVBEQVRFIHVzZXJzIFNFVCBpc19hZG1pbj0nJHt0cnVlfScgV0hFUkUgdXNlcl9pZCA9ICcke3RvQmVBZG1pbn0nIFJFVFVSTklORyAqYCkudGhlbigobmV3QWRtaW5EYXRhKSA9PiB7XG4gICAgICAgICAgaWYgKG5ld0FkbWluRGF0YS5yb3dDb3VudCA+IDApIHtcbiAgICAgICAgICAgIHJlcy5zdGF0dXMoMjAwKS5qc29uKF9yZXNwb25zZS5zdWNjZXNzKG5ld0FkbWluRGF0YS5yb3dzWzBdKSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHJlcy5zdGF0dXMoNTAwKS5qc29uKF9yZXNwb25zZS5lcnJvcignRmFpbGVkIHRvIGFzc2lnbiByb2xlJykpO1xuICAgICAgICAgIH1cbiAgICAgICAgfSkuY2F0Y2goKCkgPT4ge1xuICAgICAgICAgIHJlcy5zdGF0dXMoNDAxKS5qc29uKF9yZXNwb25zZS5lcnJvcignT3BwcyEgU29tZXRoaW5nIHdlbnQgd3JvbmcnKSk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcmVzLnN0YXR1cyg0MDMpLmpzb24oX3Jlc3BvbnNlLmVycm9yKCdDYW5ub3QgcmUtYXNzaWduIHJvbGUgdG8gdXNlcicpKTtcbiAgICAgIH1cbiAgICB9KS5jYXRjaCgoKSA9PiB7XG4gICAgICByZXMuc3RhdHVzKDQwMSkuanNvbihfcmVzcG9uc2UuZXJyb3IoJ09wcHMhIFNvbWV0aGluZyB3ZW50IHdyb25nJykpO1xuICAgIH0pO1xuICB9IGVsc2Uge1xuICAgIHJlcy5zdGF0dXMoNTA1KS5qc29uKF9yZXNwb25zZS5lcnJvcignWW91ciBwbGFucyBmYWlsZWQsIHdlIGhhdmUgYSBzdHJvbmdlciBhbGdvcml0aG0nKSk7XG4gIH1cbn0pO1xuXG5tb2R1bGUuZXhwb3J0cyA9IHJvdXRlcjtcbiJdfQ==