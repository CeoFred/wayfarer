"use strict";

/* eslint-disable consistent-return */

/* eslint-disable no-underscore-dangle */
var express = require('express');

var router = express.Router();

var logger = require('logger').createLogger('./development.log');

var bcrypt = require('bcrypt');

var _require = require('express-validator'),
    check = _require.check,
    validationResult = _require.validationResult,
    body = _require.body;

var _require2 = require('express-validator'),
    sanitizeBody = _require2.sanitizeBody;

var _response = require('../helpers/response');

var db = require('../config/db');

var Utils = require('../helpers/utils');

var authCheck = require('../middlewares/auth_check'); // create a new user


router.post('/signup', [check('email').exists().withMessage('Email is required'), check('password').exists().withMessage('Password is required'), check('first_name').exists().withMessage('First name is required'), check('last_name').exists().withMessage('Last name is required'), body('email').not().isEmpty().escape().isEmail(), sanitizeBody('email').normalizeEmail().trim()], function (req, res) {
  var errors = validationResult(req);

  if (!errors.isEmpty()) {
    res.status(404).json(_response.error(errors));
  } // logger.info({ errors, msg: 'User auth validation' });


  var _req$body = req.body,
      email = _req$body.email,
      password = _req$body.password,
      first_name = _req$body.first_name,
      last_name = _req$body.last_name;
  var isAdmin = true;
  var searchQuery = "SELECT * FROM users WHERE email = '".concat(email, "' ");
  db.query(searchQuery).then(function (resp) {
    if (resp.rowCount > 0) {
      res.status(403).json(_response.error('Email already exists'));
    } else {
      // find users
      db.query('SELECT * FROM users').then(function (users) {
        if (users.rowCount > 0) {
          isAdmin = false;
        }

        bcrypt.hash(password ? password.toLowerCase() : null, 10, function (err, hash) {
          if (err) {
            res.status(500).json(_response.error(err));
          } else {
            var uniqui = Utils.randomString(200);
            var query = {
              text: 'INSERT INTO users(user_id,first_name,last_name,email,password,is_admin,address) VALUES($1,$2,$3,$4,$5,$6,$7) RETURNING *',
              values: [uniqui.trimRight(), first_name, last_name, email, hash, isAdmin, 'somewhere']
            };
            db.query(query).then(function (respo) {
              var jwtdata = {
                email: respo.rows[0].email,
                user_id: respo.rows[0].user_id,
                is_admin: respo.rows[0].is_admin
              };
              var token = Utils.signToken(jwtdata);
              var data = {
                user_id: respo.rows[0].user_id,
                is_admin: respo.rows[0].is_admin,
                id: respo.rows[0].user_id,
                token: token
              };
              console.log("Created ".concat(JSON.stringify(data)));
              res.status(201).json(_response.success(data));
            })["catch"](function (e) {
              logger.error(e);
              res.status(500).json(_response.error('Something went wrong'));
            });
          }
        }); // logger.info(isAdmin);
      })["catch"](function (err) {
        logger.error(err);
        res.status(505).json(_response.error('Could not fetch users'));
      }); // end find users
    }
  })["catch"](function (err) {
    res.json(_response.error(err));
  }); // res.send(response.error('Something went wrong'))
}).post('/signin', body('email').not().isEmpty().escape().isEmail(), function (req, res) {
  var errors = validationResult(req);

  if (!errors.isEmpty()) {
    return res.status(403).send(_response.error(errors));
  }

  var _req$body2 = req.body,
      email = _req$body2.email,
      password = _req$body2.password;
  var searchQuery = "SELECT * FROM users WHERE email = '".concat(email.toLowerCase(), "'");
  db.query(searchQuery).then(function (resp) {
    if (resp.rowCount <= 0) {
      console.log("Email does not exist,check ".concat(email));
      res.status(402).json(_response.error('Email does not exist'));
    } // logger.info(`User ${resp.rows}`);


    bcrypt.compare(password ? password.toLowerCase() : null, resp.rows[0].password).then(function () {
      var jwtdata = {
        email: resp.rows[0].email,
        user_id: resp.rows[0].user_id,
        is_admin: resp.rows[0].is_admin
      };
      var token = Utils.signToken(jwtdata);
      req.headers.authorization = "Bearer ".concat(token);
      var data = {
        user_id: resp.rows[0].user_id,
        is_admin: resp.rows[0].is_admin,
        id: resp.rows[0].user_id,
        token: token
      };
      res.status(200).json(_response.success(data));
    })["catch"](function (err) {
      logger.error("Bycrypt error ".concat(err));
      res.status(500).json(_response.error('Failed to compare passwords'));
    });
  });
}).post('/admin/:user_id', authCheck, function (req, res) {
  // make user an admin
  var toBeAdmin = req.params.user_id;
  var data = req.decoded.data;
  var admin = data.is_admin; // logger.info(admin);

  if (admin) {
    db.query("SELECT * FROM users WHERE user_id = '".concat(toBeAdmin, "' AND is_admin='", false, "'")).then(function (resp) {
      if (resp.rowCount > 0) {
        db.query("UPDATE users SET is_admin='".concat(true, "' WHERE user_id = '", toBeAdmin, "' RETURNING *")).then(function (newAdminData) {
          if (newAdminData.rowCount > 0) {
            res.status(200).json(_response.success(newAdminData.rows[0]));
          } else {
            res.status(500).json(_response.error('Failed to assign role'));
          }
        })["catch"](function () {
          res.status(401).json(_response.error('Opps! Something went wrong'));
        });
      } else {
        res.status(403).json(_response.error('Cannot re-assign role to user'));
      }
    })["catch"](function () {
      res.status(401).json(_response.error('Opps! Something went wrong'));
    });
  } else {
    res.status(505).json(_response.error('Your plans failed, we have a stronger algorithm'));
  }
});
module.exports = router;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,