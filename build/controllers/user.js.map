{"version":3,"sources":["../../app/controllers/user.js"],"names":["express","require","router","Router","bcrypt","jwt","check","validationResult","body","sanitizeBody","_response","db","Utils","post","exists","withMessage","not","isEmpty","escape","isEmail","normalizeEmail","trim","req","res","errors","status","json","error","email","password","firstName","lastName","isAdmin","searchQuery","query","then","resp","rowCount","hash","err","uniqui","randomString","text","values","trimRight","respo","token","sign","data","rows","userId","user_id","is_admin","process","env","JWT_SIGNATURE","expiresIn","mutatePayload","success","e","send","compare","result","headers","authorization","module","exports"],"mappings":";;AAAA;;AACA;AACA,IAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AAEA,IAAMC,MAAM,GAAGF,OAAO,CAACG,MAAR,EAAf;;AAGA,IAAMC,MAAM,GAAGH,OAAO,CAAC,QAAD,CAAtB;;AACA,IAAMI,GAAG,GAAGJ,OAAO,CAAC,cAAD,CAAnB;;eAIIA,OAAO,CAAC,mBAAD,C;IAFTK,K,YAAAA,K;IACAC,gB,YAAAA,gB;IAAkBC,I,YAAAA,I;;gBAKhBP,OAAO,CAAC,mBAAD,C;IADTQ,Y,aAAAA,Y;;AAEF,IAAMC,SAAS,GAAGT,OAAO,CAAC,qBAAD,CAAzB;;AACA,IAAMU,EAAE,GAAGV,OAAO,CAAC,cAAD,CAAlB;;AACA,IAAMW,KAAK,GAAGX,OAAO,CAAC,kBAAD,CAArB,C,CAEA;;;AACAC,MAAM,CAACW,IAAP,CAAY,SAAZ,EACE,CACEP,KAAK,CAAC,OAAD,CAAL,CAAeQ,MAAf,GAAwBC,WAAxB,CAAoC,mBAApC,CADF,EAEET,KAAK,CAAC,UAAD,CAAL,CAAkBQ,MAAlB,GAA2BC,WAA3B,CAAuC,sBAAvC,CAFF,EAGET,KAAK,CAAC,WAAD,CAAL,CAAmBQ,MAAnB,GAA4BC,WAA5B,CAAwC,wBAAxC,CAHF,EAIET,KAAK,CAAC,UAAD,CAAL,CAAkBQ,MAAlB,GAA2BC,WAA3B,CAAuC,uBAAvC,CAJF,EAKEP,IAAI,CAAC,OAAD,CAAJ,CAAcQ,GAAd,GAAoBC,OAApB,GAA8BC,MAA9B,GACGC,OADH,EALF,EAOEV,YAAY,CAAC,OAAD,CAAZ,CAAsBW,cAAtB,GAAuCC,IAAvC,EAPF,CADF,EASK,UAACC,GAAD,EAAMC,GAAN,EAAc;AACf,MAAMC,MAAM,GAAGjB,gBAAgB,CAACe,GAAD,CAA/B;;AACA,MAAI,CAACE,MAAM,CAACP,OAAP,EAAL,EAAuB;AACrB,WAAOM,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBhB,SAAS,CAACiB,KAAV,CAAgBH,MAAhB,CAArB,CAAP;AACD;;AAJc,kBAWXF,GAAG,CAACd,IAXO;AAAA,MAMboB,KANa,aAMbA,KANa;AAAA,MAObC,QAPa,aAObA,QAPa;AAAA,MAQbC,SARa,aAQbA,SARa;AAAA,MASbC,QATa,aASbA,QATa;AAAA,MAUbC,OAVa,aAUbA,OAVa,EAaf;;AACA,MAAMC,WAAW,gDAAyCL,KAAzC,OAAjB;AAEAjB,EAAAA,EAAE,CAACuB,KAAH,CAASD,WAAT,EAAsBE,IAAtB,CAA2B,UAACC,IAAD,EAAU;AACnC,QAAIA,IAAI,CAACC,QAAL,GAAgB,CAApB,EAAuB;AACrBd,MAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBhB,SAAS,CAACiB,KAAV,CAAgB,sBAAhB,CAArB;AACD,KAFD,MAEO;AACLvB,MAAAA,MAAM,CAACkC,IAAP,CAAYT,QAAZ,EAAsB,EAAtB,EAA0B,UAACU,GAAD,EAAMD,IAAN,EAAe;AACvC,YAAIC,GAAJ,EAAS;AACPhB,UAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBhB,SAAS,CAACiB,KAAV,CAAgBY,GAAhB,CAArB;AACD,SAFD,MAEO;AACL,cAAMC,MAAM,GAAG5B,KAAK,CAAC6B,YAAN,CAAmB,GAAnB,CAAf;AACA,cAAMP,KAAK,GAAG;AACZQ,YAAAA,IAAI,EAAE,0HADM;AAEZC,YAAAA,MAAM,EAAE,CAACH,MAAM,CAACI,SAAP,EAAD,EAAqBd,SAArB,EAAgCC,QAAhC,EAA0CH,KAA1C,EAAiDU,IAAjD,EAAuDN,OAAO,IAAI,KAAlE,EAAyE,WAAzE;AAFI,WAAd;AAIArB,UAAAA,EAAE,CAACuB,KAAH,CAASA,KAAT,EACGC,IADH,CACQ,UAACU,KAAD,EAAW;AACf,gBAAMC,KAAK,GAAGzC,GAAG,CAAC0C,IAAJ,CAAS;AACrBC,cAAAA,IAAI,EAAE;AACJpB,gBAAAA,KAAK,EAAEiB,KAAK,CAACI,IAAN,CAAW,CAAX,EAAcrB,KADjB;AAEJsB,gBAAAA,MAAM,EAAEL,KAAK,CAACI,IAAN,CAAW,CAAX,EAAcE,OAFlB;AAGJC,gBAAAA,QAAQ,EAAEP,KAAK,CAACI,IAAN,CAAW,CAAX,EAAcG;AAHpB;AADe,aAAT,EAOdC,OAAO,CAACC,GAAR,CAAYC,aAPE,EAQd;AACEC,cAAAA,SAAS,EAAE,IADb;AAEEC,cAAAA,aAAa,EAAE;AAFjB,aARc,CAAd;AAYA,gBAAMT,IAAI,GAAG;AACXG,cAAAA,OAAO,EAAEN,KAAK,CAACI,IAAN,CAAW,CAAX,EAAcE,OADZ;AAEXC,cAAAA,QAAQ,EAAEP,KAAK,CAACI,IAAN,CAAW,CAAX,EAAcG,QAFb;AAGXN,cAAAA,KAAK,EAALA;AAHW,aAAb;AAKAvB,YAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBhB,SAAS,CAACgD,OAAV,CAAkBV,IAAlB,CAArB;AACD,WApBH,WAoBW,UAACW,CAAD,EAAO;AACdpC,YAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBhB,SAAS,CAACiB,KAAV,CAAgB,sBAAhB,CAArB;AACA,kBAAMgC,CAAN;AACD,WAvBH;AAwBD;AACF,OAlCD;AAmCD;AACF,GAxCD,WAwCS,UAACpB,GAAD,EAAS;AAChBhB,IAAAA,GAAG,CAACG,IAAJ,CAAShB,SAAS,CAACiB,KAAV,CAAgBY,GAAhB,CAAT;AACA,UAAMA,GAAN;AACD,GA3CD,EAhBe,CA8Df;AACD,CAxEH,EAwEK1B,IAxEL,CAwEU,QAxEV,EAyEEP,KAAK,CAAC,OAAD,CAAL,CAAea,OAAf,GAAyBJ,WAAzB,CAAqC,qCAArC,CAzEF,EA0EE,UAACO,GAAD,EAAMC,GAAN,EAAc;AACZ,MAAMC,MAAM,GAAGjB,gBAAgB,CAACe,GAAD,CAA/B;;AACA,MAAI,CAACE,MAAM,CAACP,OAAP,EAAL,EAAuB;AACrB,WAAOM,GAAG,CAACqC,IAAJ,CAASlD,SAAS,CAACiB,KAAV,CAAgBH,MAAhB,CAAT,CAAP;AACD;;AAJW,mBAQRF,GAAG,CAACd,IARI;AAAA,MAMVoB,KANU,cAMVA,KANU;AAAA,MAOVC,QAPU,cAOVA,QAPU;AASZ,MAAMI,WAAW,wEAAiEL,KAAjE,cAAjB;AAEAjB,EAAAA,EAAE,CAACuB,KAAH,CAASD,WAAT,EAAsBE,IAAtB,CAA2B,UAACC,IAAD,EAAU;AACnC,QAAIA,IAAI,CAACC,QAAL,IAAiB,CAArB,EAAwB;AACtBd,MAAAA,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBhB,SAAS,CAACiB,KAAV,CAAgB,sBAAhB,CAArB;AACD;;AAEDvB,IAAAA,MAAM,CAACyD,OAAP,CAAehC,QAAf,EAAyBO,IAAI,CAACa,IAAL,CAAU,CAAV,EAAapB,QAAtC,EAAgD,UAACU,GAAD,EAAMuB,MAAN,EAAiB;AAC/D;AACA,UAAIvB,GAAJ,EAAS;AACP,eAAOhB,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBhB,SAAS,CAACiB,KAAV,CAAgB,0BAAhB,CAArB,CAAP;AACD;;AACD,UAAImC,MAAJ,EAAY;AACV,YAAMhB,KAAK,GAAGzC,GAAG,CAAC0C,IAAJ,CAAS;AACrBC,UAAAA,IAAI,EAAE;AACJpB,YAAAA,KAAK,EAAEQ,IAAI,CAACa,IAAL,CAAU,CAAV,EAAarB,KADhB;AAEJsB,YAAAA,MAAM,EAAEd,IAAI,CAACa,IAAL,CAAU,CAAV,EAAaE,OAFjB;AAGJC,YAAAA,QAAQ,EAAEhB,IAAI,CAACa,IAAL,CAAU,CAAV,EAAaG;AAHnB;AADe,SAAT,EAOdC,OAAO,CAACC,GAAR,CAAYC,aAPE,EAQd;AACEC,UAAAA,SAAS,EAAE,IADb;AAEEC,UAAAA,aAAa,EAAE;AAFjB,SARc,CAAd;AAYAnC,QAAAA,GAAG,CAACyC,OAAJ,CAAYC,aAAZ,oBAAsClB,KAAtC;AACA,YAAME,IAAI,GAAG;AACXG,UAAAA,OAAO,EAAEf,IAAI,CAACa,IAAL,CAAU,CAAV,EAAaE,OADX;AAEXC,UAAAA,QAAQ,EAAEhB,IAAI,CAACa,IAAL,CAAU,CAAV,EAAaG,QAFZ;AAGXN,UAAAA,KAAK,EAALA;AAHW,SAAb;AAKA,eAAOvB,GAAG,CAACE,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqBhB,SAAS,CAACgD,OAAV,CAAkBV,IAAlB,CAArB,CAAP;AACD;AACF,KA1BD;AA2BD,GAhCD;AAiCD,CAtHH;AAwHAiB,MAAM,CAACC,OAAP,GAAiBhE,MAAjB","sourcesContent":["/* eslint-disable consistent-return */\n/* eslint-disable no-underscore-dangle */\nconst express = require('express');\n\nconst router = express.Router();\n\n\nconst bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\nconst {\n  check,\n  validationResult, body,\n} = require('express-validator');\n\nconst {\n  sanitizeBody,\n} = require('express-validator');\nconst _response = require('../helpers/response');\nconst db = require('../config/db');\nconst Utils = require('../helpers/utils');\n\n// create a new user\nrouter.post('/signup',\n  [\n    check('email').exists().withMessage('Email is required'),\n    check('password').exists().withMessage('Password is required'),\n    check('firstName').exists().withMessage('First name is required'),\n    check('lastName').exists().withMessage('Last name is required'),\n    body('email').not().isEmpty().escape()\n      .isEmail(),\n    sanitizeBody('email').normalizeEmail().trim(),\n  ], (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(404).json(_response.error(errors));\n    }\n    const {\n      email,\n      password,\n      firstName,\n      lastName,\n      isAdmin,\n    } = req.body;\n\n    // console.log(email)\n    const searchQuery = `SELECT * FROM users WHERE email = '${email}' `;\n\n    db.query(searchQuery).then((resp) => {\n      if (resp.rowCount > 0) {\n        res.status(403).json(_response.error('Email already exists'));\n      } else {\n        bcrypt.hash(password, 10, (err, hash) => {\n          if (err) {\n            res.status(500).json(_response.error(err));\n          } else {\n            const uniqui = Utils.randomString(200);\n            const query = {\n              text: 'INSERT INTO users(user_id,first_name,last_name,email,password,is_admin,address) VALUES($1,$2,$3,$4,$5,$6,$7) RETURNING *',\n              values: [uniqui.trimRight(), firstName, lastName, email, hash, isAdmin || false, 'somewhere'],\n            };\n            db.query(query)\n              .then((respo) => {\n                const token = jwt.sign({\n                  data: {\n                    email: respo.rows[0].email,\n                    userId: respo.rows[0].user_id,\n                    is_admin: respo.rows[0].is_admin,\n                  },\n                },\n                process.env.JWT_SIGNATURE,\n                {\n                  expiresIn: '7d',\n                  mutatePayload: true,\n                });\n                const data = {\n                  user_id: respo.rows[0].user_id,\n                  is_admin: respo.rows[0].is_admin,\n                  token,\n                };\n                res.status(201).json(_response.success(data));\n              }).catch((e) => {\n                res.status(500).json(_response.error('Something went wrong'));\n                throw e;\n              });\n          }\n        });\n      }\n    }).catch((err) => {\n      res.json(_response.error(err));\n      throw err;\n    });\n\n\n    // res.send(response.error('Something went wrong'))\n  }).post('/login',\n  check('email').isEmail().withMessage('A valid email is required to signin'),\n  (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.send(_response.error(errors));\n    }\n    const {\n      email,\n      password,\n    } = req.body;\n    const searchQuery = `SELECT password,user_id,is_admin FROM users WHERE email = '${email}' LIMIT 1`;\n\n    db.query(searchQuery).then((resp) => {\n      if (resp.rowCount <= 0) {\n        res.status(403).json(_response.error('Email does not exist'));\n      }\n\n      bcrypt.compare(password, resp.rows[0].password, (err, result) => {\n        // res == true\n        if (err) {\n          return res.status(401).json(_response.error('Failed with code x(2e2x)'));\n        }\n        if (result) {\n          const token = jwt.sign({\n            data: {\n              email: resp.rows[0].email,\n              userId: resp.rows[0].user_id,\n              is_admin: resp.rows[0].is_admin,\n            },\n          },\n          process.env.JWT_SIGNATURE,\n          {\n            expiresIn: '7d',\n            mutatePayload: true,\n          });\n          req.headers.authorization = `Bearer ${token}`;\n          const data = {\n            user_id: resp.rows[0].user_id,\n            is_admin: resp.rows[0].is_admin,\n            token,\n          };\n          return res.status(200).json(_response.success(data));\n        }\n      });\n    });\n  });\n\nmodule.exports = router;\n"],"file":"user.js"}