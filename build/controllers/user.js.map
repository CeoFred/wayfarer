{"version":3,"sources":["../../app/controllers/user.js"],"names":["express","require","router","Router","bcrypt","jwt","check","validationResult","body","sanitizeBody","_response","db","Utils","authCheck","post","exists","withMessage","not","isEmpty","escape","isEmail","normalizeEmail","trim","req","res","errors","status","json","error","email","password","firstName","lastName","searchQuery","query","then","resp","rowCount","hash","err","uniqui","randomString","text","values","trimRight","respo","token","sign","data","rows","userId","user_id","is_admin","process","env","JWT_SIGNATURE","expiresIn","mutatePayload","success","e","send","compare","result","headers","authorization","toBeAdmin","params","decoded","admin","newAdminData","module","exports"],"mappings":"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","sourcesContent":["/* eslint-disable consistent-return */\n/* eslint-disable no-underscore-dangle */\nconst express = require('express');\n\nconst router = express.Router();\n\n\nconst bcrypt = require('bcrypt');\nconst jwt = require('jsonwebtoken');\nconst {\n  check,\n  validationResult, body,\n} = require('express-validator');\n\nconst {\n  sanitizeBody,\n} = require('express-validator');\nconst _response = require('../helpers/response');\nconst db = require('../config/db');\nconst Utils = require('../helpers/utils');\nconst authCheck = require('../middlewares/auth_check');\n\n// create a new user\nrouter.post('/signup',\n  [\n    check('email').exists().withMessage('Email is required'),\n    check('password').exists().withMessage('Password is required'),\n    check('firstName').exists().withMessage('First name is required'),\n    check('lastName').exists().withMessage('Last name is required'),\n    body('email').not().isEmpty().escape()\n      .isEmail(),\n    sanitizeBody('email').normalizeEmail().trim(),\n  ], (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.status(404).json(_response.error(errors));\n    }\n    const {\n      email,\n      password,\n      firstName,\n      lastName,\n    } = req.body;\n\n    // console.log(email)\n    const searchQuery = `SELECT * FROM users WHERE email = '${email}' `;\n\n    db.query(searchQuery).then((resp) => {\n      if (resp.rowCount > 0) {\n        res.status(403).json(_response.error('Email already exists'));\n      } else {\n        bcrypt.hash(password, 10, (err, hash) => {\n          if (err) {\n            res.status(500).json(_response.error(err));\n          } else {\n            const uniqui = Utils.randomString(200);\n            const query = {\n              text: 'INSERT INTO users(user_id,first_name,last_name,email,password,is_admin,address) VALUES($1,$2,$3,$4,$5,$6,$7) RETURNING *',\n              values: [uniqui.trimRight(), firstName, lastName, email, hash, false, 'somewhere'],\n            };\n            db.query(query)\n              .then((respo) => {\n                const token = jwt.sign({\n                  data: {\n                    email: respo.rows[0].email,\n                    userId: respo.rows[0].user_id,\n                    is_admin: respo.rows[0].is_admin,\n                  },\n                },\n                process.env.JWT_SIGNATURE,\n                {\n                  expiresIn: '7d',\n                  mutatePayload: true,\n                });\n                const data = {\n                  user_id: respo.rows[0].user_id,\n                  is_admin: respo.rows[0].is_admin,\n                  token,\n                };\n                res.status(201).json(_response.success(data));\n              }).catch((e) => {\n                res.status(500).json(_response.error('Something went wrong'));\n                throw e;\n              });\n          }\n        });\n      }\n    }).catch((err) => {\n      res.json(_response.error(err));\n      throw err;\n    });\n\n\n    // res.send(response.error('Something went wrong'))\n  }).post('/login',\n  check('email').isEmail().withMessage('A valid email is required to signin'),\n  (req, res) => {\n    const errors = validationResult(req);\n    if (!errors.isEmpty()) {\n      return res.send(_response.error(errors));\n    }\n    const {\n      email,\n      password,\n    } = req.body;\n    const searchQuery = `SELECT password,user_id,is_admin FROM users WHERE email = '${email}' LIMIT 1`;\n\n    db.query(searchQuery).then((resp) => {\n      if (resp.rowCount <= 0) {\n        res.status(403).json(_response.error('Email does not exist'));\n      }\n\n      bcrypt.compare(password, resp.rows[0].password, (err, result) => {\n        // res == true\n        if (err) {\n          return res.status(401).json(_response.error('Failed with code x(2e2x)'));\n        }\n        if (result) {\n          const token = jwt.sign({\n            data: {\n              email: resp.rows[0].email,\n              userId: resp.rows[0].user_id,\n              is_admin: resp.rows[0].is_admin,\n            },\n          },\n          process.env.JWT_SIGNATURE,\n          {\n            expiresIn: '7d',\n            mutatePayload: true,\n          });\n          req.headers.authorization = `Bearer ${token}`;\n          const data = {\n            user_id: resp.rows[0].user_id,\n            is_admin: resp.rows[0].is_admin,\n            token,\n          };\n          return res.status(200).json(_response.success(data));\n        }\n      });\n    });\n  }).post('/admin/:userId', authCheck, (req, res) => {\n  // make user an admin\n  const toBeAdmin = req.params.userId;\n  const { data } = req.decoded;\n  const admin = data.is_admin;\n\n\n  if (admin) {\n    db.query(`SELECT * FROM users WHERE user_id = '${toBeAdmin}' AND is_admin='${false}'`).then((resp) => {\n      if (resp.rowCount > 0) {\n        db.query(`UPDATE users SET is_admin='${true}' WHERE user_id = '${toBeAdmin}' RETURNING *`).then((newAdminData) => {\n          if (newAdminData.rowCount > 0) {\n            res.status(200).json(_response.success(newAdminData.rows[0]));\n          } else {\n            res.status(500).json(_response.error('Failed to assign role'));\n          }\n        }).catch(() => {\n          res.status(401).json(_response.error('Opps! Something went wrong'));\n        });\n      } else {\n        res.status(403).json(_response.error('Cannot re-assign role to user'));\n      }\n    }).catch(() => {\n      res.status(401).json(_response.error('Opps! Something went wrong'));\n    });\n  } else {\n    res.status(505).json(_response.error('Your plans failed, we have a stronger algorithm'));\n  }\n});\n\nmodule.exports = router;\n"],"file":"user.js"}